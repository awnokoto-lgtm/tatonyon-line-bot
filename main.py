# main.py
import os
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse, Response
from linebot import LineBotApi, WebhookParser
from linebot.models import MessageEvent, TextMessage, TextSendMessage

# ====== ENV ======
CHANNEL_SECRET = os.getenv("LINE_CHANNEL_SECRET")
CHANNEL_TOKEN  = os.getenv("LINE_CHANNEL_TOKEN")

if not CHANNEL_SECRET or not CHANNEL_TOKEN:
    raise RuntimeError("Missing LINE_CHANNEL_SECRET or LINE_CHANNEL_TOKEN")

line_bot_api = LineBotApi(CHANNEL_TOKEN)
parser       = WebhookParser(CHANNEL_SECRET)

app = FastAPI(title="Tatonyon Trip Bot")

# ====== UTIL ======
def norm(text: str) -> str:
    return (text or "").strip().lower().replace(" ", "")

# ====== REPLIES ======
def reply_menu() -> str:
    return (
        "üìå ‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏ú‡∏ô‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô (‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î)\n"
        "‚Ä¢ ‡πÇ‡∏ï‡πÄ‡∏Å‡∏µ‡∏¢‡∏ß5‡∏ß‡∏±‡∏ô  ‚Äì ‡πÅ‡∏û‡∏•‡∏ô‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡πÄ‡∏°‡∏∑‡∏≠‡∏á + Day trip\n"
        "‚Ä¢ ‡πÇ‡∏≠‡∏ã‡∏≤‡∏Å‡πâ‡∏≤‚Äì‡πÄ‡∏Å‡∏µ‡∏¢‡∏ß‡πÇ‡∏ï ‚Äì ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Ñ‡∏±‡∏ô‡πÑ‡∏ã‡∏Æ‡∏¥‡∏ï 4‚Äì5 ‡∏ß‡∏±‡∏ô\n"
        "‚Ä¢ ‡∏Æ‡∏≠‡∏Å‡πÑ‡∏Å‡πÇ‡∏î ‚Äì ‡∏ã‡∏±‡∏õ‡πÇ‡∏õ‡πÇ‡∏£/‡πÇ‡∏≠‡∏ï‡∏≤‡∏£‡∏∏/‡∏ö‡∏¥‡πÄ‡∏≠‡∏∞\n"
        "‚Ä¢ ‡∏Ñ‡∏¥‡∏ß‡∏ä‡∏π ‚Äì ‡∏ü‡∏∏‡∏Å‡∏∏‡πÇ‡∏≠‡∏Å‡∏∞/‡∏ô‡∏≤‡∏á‡∏≤‡∏ã‡∏≤‡∏Å‡∏¥/‡πÄ‡∏ö‡∏õ‡∏õ‡∏∏\n"
        "‚Ä¢ ‡∏ã‡∏≤‡∏Å‡∏∏‡∏£‡∏∞ ‚Äì ‡∏ä‡πà‡∏ß‡∏á‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ä‡∏°‡∏ã‡∏≤‡∏Å‡∏∏‡∏£‡∏∞\n"
        "‚Ä¢ ‡πÉ‡∏ö‡πÑ‡∏°‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ ‚Äì ‡∏à‡∏∏‡∏î‡πÑ‡∏Æ‡πÑ‡∏•‡∏ï‡πå\n"
        "‚Ä¢ JR PASS ‚Äì ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡πã‡∏ß‡∏£‡∏ñ‡πÑ‡∏ü\n"
        "‚Ä¢ SUICA ‚Äì ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏à‡πà‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á\n"
        "‚Ä¢ WIFI ‚Äì ‡∏ã‡∏¥‡∏°/‡πÑ‡∏ß‡πÑ‡∏ü‡∏û‡∏Å‡∏û‡∏≤\n\n"
        "‡∏•‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå: ‡πÇ‡∏ï‡πÄ‡∏Å‡∏µ‡∏¢‡∏ß5‡∏ß‡∏±‡∏ô, ‡πÇ‡∏≠‡∏ã‡∏≤‡∏Å‡πâ‡∏≤‚Äì‡πÄ‡∏Å‡∏µ‡∏¢‡∏ß‡πÇ‡∏ï, ‡∏Æ‡∏≠‡∏Å‡πÑ‡∏Å‡πÇ‡∏î, ‡∏Ñ‡∏¥‡∏ß‡∏ä‡∏π, ‡∏ã‡∏≤‡∏Å‡∏∏‡∏£‡∏∞, ‡πÉ‡∏ö‡πÑ‡∏°‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ, jrpass, suica, wifi"
    )

def plan_tokyo_5d() -> str:
    return (
        "üóº ‡πÇ‡∏ï‡πÄ‡∏Å‡∏µ‡∏¢‡∏ß 5 ‡∏ß‡∏±‡∏ô (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Ñ‡∏£‡πà‡∏≤‡∏ß‡πÜ)\n"
        "Day 1: ‡∏™‡∏ô‡∏≤‡∏°‡∏ö‡∏¥‡∏ô‚Üí‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å, ‡∏ä‡∏¥‡∏ô‡∏à‡∏π‡∏Å‡∏∏/‡∏ä‡∏¥‡∏ö‡∏∏‡∏¢‡∏∞, ‡∏à‡∏∏‡∏î‡∏ä‡∏°‡∏ß‡∏¥‡∏ß‡πÇ‡∏ï‡πÄ‡∏Å‡∏µ‡∏¢‡∏ß\n"
        "Day 2: ‡∏ß‡∏±‡∏î‡∏≠‡∏≤‡∏ã‡∏≤‡∏Å‡∏∏‡∏™‡∏∞‚Äì‡πÇ‡∏ï‡πÄ‡∏Å‡∏µ‡∏¢‡∏ß‡∏™‡∏Å‡∏≤‡∏¢‡∏ó‡∏£‡∏µ‚Äì‡∏≠‡∏∏‡πÄ‡∏≠‡πÇ‡∏ô‡∏∞/‡∏≠‡∏≤‡∏Å‡∏¥‡∏Æ‡∏≤‡∏ö‡∏≤‡∏£‡∏∞\n"
        "Day 3: Day Trip ‚Üí ‡∏ü‡∏π‡∏à‡∏¥/‡∏Ñ‡∏≤‡∏ß‡∏≤‡∏Å‡∏∏‡∏à‡∏¥‡πÇ‡∏Å‡∏∞ ‡∏´‡∏£‡∏∑‡∏≠ Nikko/Kamakura\n"
        "Day 4: ‡πÇ‡∏≠‡πÑ‡∏î‡∏ö‡∏∞/TeamLab‚Äì‡∏Å‡∏¥‡∏ô‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏¢‡πà‡∏≤‡∏ô Ginza‚ÄìTokyo Station\n"
        "Day 5: ‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏ù‡∏≤‡∏Å‚Äì‡∏™‡∏ô‡∏≤‡∏°‡∏ö‡∏¥‡∏ô\n\n"
        "üí° ‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á: IC Card (Suica/Pasmo) ‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡πÇ‡∏ï‡πÄ‡∏Å‡∏µ‡∏¢‡∏ß\n"
        "üìé ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°: https://www.gotokyo.org/en/  (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£)"
    )

def plan_kansai() -> str:
    return (
        "‚õ©Ô∏è ‡πÇ‡∏≠‡∏ã‡∏≤‡∏Å‡πâ‡∏≤‚Äì‡πÄ‡∏Å‡∏µ‡∏¢‡∏ß‡πÇ‡∏ï (4‚Äì5 ‡∏ß‡∏±‡∏ô)\n"
        "Day 1: ‡πÇ‡∏≠‡∏ã‡∏≤‡∏Å‡πâ‡∏≤ (Dotonbori‚ÄìShinsaibashi‚ÄìUmeda Sky)\n"
        "Day 2: ‡πÄ‡∏Å‡∏µ‡∏¢‡∏ß‡πÇ‡∏ï (Fushimi Inari‚ÄìKiyomizu‚ÄìGion)\n"
        "Day 3: ‡∏ô‡∏≤‡∏£‡∏≤ (Todaiji‚Äì‡∏™‡∏ß‡∏ô‡∏Å‡∏ß‡∏≤‡∏á) + ‡∏Å‡∏•‡∏±‡∏ö‡πÇ‡∏≠‡∏ã‡∏≤‡∏Å‡πâ‡∏≤\n"
        "Day 4: Universal/Osaka Castle ‡∏´‡∏£‡∏∑‡∏≠ Kobe\n"
        "Day 5: ‡∏ä‡πâ‡∏≠‡∏õ‡∏Ç‡∏≠‡∏á‡∏ù‡∏≤‡∏Å‚Äì‡∏™‡∏ô‡∏≤‡∏°‡∏ö‡∏¥‡∏ô\n\n"
        "üí° ‡∏ö‡∏±‡∏ï‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: Kansai Thru Pass/ICOCA ‡∏Ç‡∏∂‡πâ‡∏ô‡∏Å‡∏±‡∏ö‡πÅ‡∏ú‡∏ô\n"
        "üìé ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°: https://www.japan-guide.com/e/e2157.html"
    )

def plan_hokkaido() -> str:
    return (
        "‚ùÑÔ∏è ‡∏Æ‡∏≠‡∏Å‡πÑ‡∏Å‡πÇ‡∏î (6‚Äì7 ‡∏ß‡∏±‡∏ô ‡πÅ‡∏ö‡∏ö‡∏¢‡πà‡∏≠)\n"
        "‡∏ã‡∏±‡∏õ‡πÇ‡∏õ‡πÇ‡∏£‚Äì‡πÇ‡∏≠‡∏ï‡∏≤‡∏£‡∏∏‚Äì‡∏ô‡∏¥‡∏á‡πÄ‡∏Å‡∏¥‡πâ‡∏•‡πÄ‡∏ó‡∏≠‡πÄ‡∏£‡∏™/‡∏ü‡∏∏‡∏£‡∏≤‡πÇ‡∏ô‡∏∞‚Äì‡∏ö‡∏¥‡πÄ‡∏≠‡∏∞‚Äì‡∏ó‡∏∞‡πÄ‡∏•‡∏™‡∏≤‡∏ö‡πÇ‡∏ó‡∏¢‡∏∞\n"
        "‡∏ñ‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏ô‡∏≤‡∏ß: ‡πÄ‡∏ó‡∏®‡∏Å‡∏≤‡∏•‡∏´‡∏¥‡∏°‡∏∞‡∏ã‡∏±‡∏õ‡πÇ‡∏õ‡πÇ‡∏£, ‡∏•‡∏≤‡∏ô‡∏™‡∏Å‡∏µ\n"
        "üí° ‡∏£‡∏ñ‡πÄ‡∏ä‡πà‡∏≤/‡∏ö‡∏±‡∏™/‡∏£‡∏ñ‡πÑ‡∏ü ‡∏Ç‡∏∂‡πâ‡∏ô‡∏Å‡∏±‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏•\n"
        "üìé ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°: https://www.visit-hokkaido.jp/en/"
    )

def plan_kyushu() -> str:
    return (
        "üåã ‡∏Ñ‡∏¥‡∏ß‡∏ä‡∏π (‡∏ü‡∏∏‡∏Å‡∏∏‡πÇ‡∏≠‡∏Å‡∏∞‚Äì‡∏ô‡∏≤‡∏á‡∏≤‡∏ã‡∏≤‡∏Å‡∏¥‚Äì‡∏Ñ‡∏∏‡∏°‡∏≤‡πÇ‡∏°‡πÇ‡∏ï‡∏∞‚Äì‡πÄ‡∏ö‡∏õ‡∏õ‡∏∏)\n"
        "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ 5‚Äì7 ‡∏ß‡∏±‡∏ô: ‡∏ü‡∏∏‡∏Å‡∏∏‡πÇ‡∏≠‡∏Å‡∏∞(‡∏Å‡∏¥‡∏ô‚Äì‡∏ä‡πâ‡∏≠‡∏õ)‚Üí‡∏ô‡∏≤‡∏á‡∏≤‡∏ã‡∏≤‡∏Å‡∏¥(Glovers/Dejima)\n"
        "‚Üí‡∏Ñ‡∏∏‡∏°‡∏≤‡πÇ‡∏°‡πÇ‡∏ï‡∏∞(‡∏õ‡∏£‡∏≤‡∏™‡∏≤‡∏ó)‚Üí‡∏¢‡∏π‡∏ü‡∏∏‡∏≠‡∏¥‡∏ô/‡πÄ‡∏ö‡∏õ‡∏õ‡∏∏(‡∏≠‡∏≠‡∏ô‡πÄ‡∏ã‡πá‡∏ô)\n"
        "üìé ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°: https://www.japan-guide.com/list/e1108.html"
    )

def info_sakura() -> str:
    return (
        "üå∏ ‡∏ã‡∏≤‡∏Å‡∏∏‡∏£‡∏∞‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô‡πÇ‡∏î‡∏¢‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ: ‡∏õ‡∏•‡∏≤‡∏¢‡∏°‡∏µ.‡∏Ñ.‚Äì‡∏ï‡πâ‡∏ô‡πÄ‡∏°.‡∏¢. (‡πÇ‡∏ï‡πÄ‡∏Å‡∏µ‡∏¢‡∏ß/‡∏Ñ‡∏±‡∏ô‡πÇ‡∏ï)\n"
        "‡∏Ñ‡∏±‡∏ô‡πÑ‡∏ã: ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ô / ‡∏Æ‡∏≠‡∏Å‡πÑ‡∏Å‡πÇ‡∏î‡∏ä‡πâ‡∏≤‡∏Å‡∏ß‡πà‡∏≤ (‡∏õ‡∏•‡∏≤‡∏¢‡πÄ‡∏°.‡∏¢.‚Äì‡∏û.‡∏Ñ.)\n"
        "üìé ‡∏î‡∏π‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï: https://www.japan-guide.com/sakura/\n"
        "üí° ‡∏ó‡∏£‡∏¥‡∏Ñ: ‡πÄ‡∏ä‡πá‡∏Å‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏Å‡∏•‡πâ‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
    )

def info_momiji() -> str:
    return (
        "üçÅ ‡πÉ‡∏ö‡πÑ‡∏°‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ (‡πÇ‡∏°‡∏°‡∏¥‡∏à‡∏¥) ‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ: ‡∏õ‡∏•‡∏≤‡∏¢‡∏ï.‡∏Ñ.‚Äì‡∏õ‡∏•‡∏≤‡∏¢‡∏û.‡∏¢.\n"
        "‡∏Ñ‡∏±‡∏ô‡πÑ‡∏ã/‡∏Ñ‡∏±‡∏ô‡πÇ‡∏ï: ‡∏û‡∏µ‡∏Ñ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏û.‡∏¢. / ‡∏Æ‡∏≠‡∏Å‡πÑ‡∏Å‡πÇ‡∏î‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤ (‡∏õ‡∏•‡∏≤‡∏¢‡∏Å.‡∏¢.‚Äì‡∏ï.‡∏Ñ.)\n"
        "üìé ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï: https://www.japan-guide.com/fallcolor/\n"
        "üí° ‡∏à‡∏∏‡∏î‡∏Æ‡∏¥‡∏ï: Arashiyama, Kiyomizu, Meiji Jingu Gaien, Nikko"
    )

def info_jrpass() -> str:
    return (
        "üöÑ JR PASS/‡∏ï‡∏±‡πã‡∏ß‡∏£‡∏ñ‡πÑ‡∏ü: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≤‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏à‡∏£‡∏¥‡∏á\n"
        "‚Ä¢ Tokyo only ‚Üí ‡πÑ‡∏°‡πà‡∏Ñ‡∏∏‡πâ‡∏° JR Pass, ‡πÉ‡∏ä‡πâ IC Card/‡∏ï‡∏±‡πã‡∏ß‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô\n"
        "‚Ä¢ ‡∏ß‡∏¥‡πà‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ‡∏ö‡πà‡∏≠‡∏¢ ‡πÜ ‚Üí ‡∏Ñ‡πà‡∏≠‡∏¢‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤ JR Pass/Regional Pass\n"
        "üìé ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à: https://japanrailpass.net/  ‡πÅ‡∏•‡∏∞ https://www.japan-guide.com/e/e2357.html"
    )

def info_suica() -> str:
    return (
        "üí≥ SUICA/PASMO/ICOCA = ‡∏ö‡∏±‡∏ï‡∏£‡πÅ‡∏ï‡∏∞‡∏à‡πà‡∏≤‡∏¢‡∏£‡∏ñ‡πÑ‡∏ü/‡∏ö‡∏±‡∏™/‡∏£‡πâ‡∏≤‡∏ô‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡∏ã‡∏∑‡πâ‡∏≠\n"
        "‡∏ã‡∏∑‡πâ‡∏≠/‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÉ‡∏´‡∏ç‡πà ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢\n"
        "üìé ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ: https://www.japan-guide.com/e/e2359_003.html"
    )

def info_wifi() -> str:
    return (
        "üì∂ ‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô: ‡∏ã‡∏¥‡∏°/‡πÑ‡∏ß‡πÑ‡∏ü‡∏û‡∏Å‡∏û‡∏≤\n"
        "‚Ä¢ ‡∏ã‡∏¥‡∏° Data 7‚Äì15GB ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡πÑ‡∏õ‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß/‡∏Ñ‡∏π‡πà\n"
        "‚Ä¢ WiFi Pocket ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡πÑ‡∏õ‡∏Å‡∏±‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô ‡πÅ‡∏ä‡∏£‡πå‡∏™‡∏∞‡∏î‡∏ß‡∏Å\n"
        "üìé ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à: ‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡πÑ‡∏ó‡∏¢ + ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"
    )

def unknown_help() -> str:
    return (
        "‡∏û‡∏¥‡∏°‡∏û‡πå '‡πÄ‡∏°‡∏ô‡∏π' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n"
        "‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡πÇ‡∏ï‡πÄ‡∏Å‡∏µ‡∏¢‡∏ß5‡∏ß‡∏±‡∏ô, ‡πÇ‡∏≠‡∏ã‡∏≤‡∏Å‡πâ‡∏≤‚Äì‡πÄ‡∏Å‡∏µ‡∏¢‡∏ß‡πÇ‡∏ï, ‡∏Æ‡∏≠‡∏Å‡πÑ‡∏Å‡πÇ‡∏î, ‡∏Ñ‡∏¥‡∏ß‡∏ä‡∏π, ‡∏ã‡∏≤‡∏Å‡∏∏‡∏£‡∏∞, ‡πÉ‡∏ö‡πÑ‡∏°‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ, jrpass, suica, wifi"
    )

# ====== ROUTES (health) ======
@app.get("/")
async def root():
    return {"message": "Japan Trip Bot is running!"}

@app.get("/favicon.ico")
async def favicon():
    return Response(status_code=204)

# ====== WEBHOOK ======
@app.post("/webhook")
async def webhook(request: Request):
    signature = request.headers.get("x-line-signature")
    body = await request.body()

    try:
        events = parser.parse(body.decode("utf-8"), signature)
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))

    for event in events:
        if isinstance(event, MessageEvent) and isinstance(event.message, TextMessage):
            user_text_raw = event.message.text or ""
            key = norm(user_text_raw)

            if key in ["‡πÄ‡∏°‡∏ô‡∏π", "menu"]:
                reply = reply_menu()
            elif "‡πÇ‡∏ï‡πÄ‡∏Å‡∏µ‡∏¢‡∏ß5‡∏ß‡∏±‡∏ô" in key or "tokyo5" in key:
                reply = plan_tokyo_5d()
            elif "‡πÇ‡∏≠‡∏ã‡∏≤‡∏Å‡πâ‡∏≤‚Äì‡πÄ‡∏Å‡∏µ‡∏¢‡∏ß‡πÇ‡∏ï" in user_text_raw or "‡πÇ‡∏≠‡∏ã‡∏≤‡∏Å‡πâ‡∏≤-‡πÄ‡∏Å‡∏µ‡∏¢‡∏ß‡πÇ‡∏ï" in user_text_raw or "‡∏Ñ‡∏±‡∏ô‡πÑ‡∏ã" in user_text_raw or "kansai" in key:
                reply = plan_kansai()
            elif "‡∏Æ‡∏≠‡∏Å‡πÑ‡∏Å‡πÇ‡∏î" in key or "hokkaido" in key or "‡∏ã‡∏±‡∏õ‡πÇ‡∏õ‡πÇ‡∏£" in key:
                reply = plan_hokkaido()
            elif "‡∏Ñ‡∏¥‡∏ß‡∏ä‡∏π" in key or "kyushu" in key or "‡∏ü‡∏∏‡∏Å‡∏∏‡πÇ‡∏≠‡∏Å‡∏∞" in key:
                reply = plan_kyushu()
            elif "‡∏ã‡∏≤‡∏Å‡∏∏‡∏£‡∏∞" in key or "sakura" in key:
                reply = info_sakura()
            elif "‡πÉ‡∏ö‡πÑ‡∏°‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ" in key or "momiji" in key or "autumn" in key:
                reply = info_momiji()
            elif "jrpass" in key or "jr pass" in user_text_raw.lower():
                reply = info_jrpass()
            elif "suica" in key or "pasmo" in key or "icoca" in key:
                reply = info_suica()
            elif "wifi" in key or "‡∏ã‡∏¥‡∏°" in user_text_raw:
                reply = info_wifi()
            elif "‡∏ä‡πà‡∏ß‡∏¢" in user_text_raw or "help" in key:
                reply = unknown_help()
            else:
                reply = f"‡∏ö‡∏≠‡∏ó‡∏ï‡∏≠‡∏ö: {user_text_raw}\n\n{unknown_help()}"

            line_bot_api.reply_message(event.reply_token, TextSendMessage(text=reply))

    return JSONResponse({"status": "ok"})
